{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","console","log","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","PathfindingVisualizer","state","mouseIsPressed","getInitialGrid","bind","reset","getRandomGrid","newGrid","getNewGridWithWallToggled","setState","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","document","getElementById","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","currentRow","createNode","slice","Math","floor","random","newNode","onClick","visualizeDijkstra","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a42ec132.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n  render() {\n    let {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row,\n    } = this.props;\n    const extraClassName = isFinish\n      ? 'node-finish'\n      : isStart\n        ? 'node-start'\n        : isWall\n          ? 'node-wall'\n          : '';\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}></div>\n    );\n  }\n}\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  console.log(unvisitedNodes)\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","import React, { Component } from 'react';\nimport Node from './Node/Node';\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\n\nimport './PathfindingVisualizer.css';\n\nconst START_NODE_ROW = 5;\nconst START_NODE_COL = 10;\nconst FINISH_NODE_ROW = 15;\nconst FINISH_NODE_COL = 35;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n    };\n    this.getInitialGrid = this.getInitialGrid.bind(this);\n    this.reset = this.reset.bind(this);\n    this.getRandomGrid = this.getRandomGrid.bind(this);\n\n  }\n\n  componentDidMount() {\n    this.getInitialGrid();\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid });\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path';\n      }, 30 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  getInitialGrid() {\n    const grid = [];\n    for (let row = 0; row < 20; row++) {\n      const currentRow = [];\n      for (let col = 0; col < 50; col++) {\n        currentRow.push(createNode(col, row));\n      }\n      grid.push(currentRow);\n    }\n    this.setState({ grid });\n    return grid;\n  };\n\n  getRandomGrid() {\n    const newGrid = this.state.grid.slice();\n    for (let i = 0; i < 500; i++) {\n      const row = Math.floor(Math.random() * 20);\n      const col = Math.floor(Math.random() * 50);\n      if ((row === START_NODE_ROW && col === START_NODE_COL) || (row === FINISH_NODE_ROW && col === FINISH_NODE_COL)) {\n        console.log(row, col)\n        continue;\n      }\n      const node = newGrid[row][col];\n      const newNode = {\n        ...node,\n        isWall: !node.isWall,\n      };\n      newGrid[row][col] = newNode;\n    }\n    this.setState({ grid: newGrid })\n    return newGrid;\n  }\n\n  reset() {\n    this.getInitialGrid();\n    for (let row = 0; row < 20; row++) {\n      for (let col = 0; col < 50; col++) {\n        let node = document.getElementById(`node-${row}-${col}`)\n        if (row === START_NODE_ROW && col === START_NODE_COL)\n          node.className = 'node node-start';\n        else if (row === FINISH_NODE_ROW && col === FINISH_NODE_COL)\n          node.className = 'node node-finish';\n        else\n          node.className = 'node';\n      }\n    }\n  }\n\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n\n    return (\n      <div className='box'>\n        <h1 className='title'>Visualize Dijkstra's Algorithm</h1>\n        <div className='container'>\n          <button className='btn vis' onClick={() => this.visualizeDijkstra()}>\n            Visualize\n          </button>\n          <button className='btn reset' onClick={this.reset}>Reset</button>\n          <button className='btn rand' onClick={this.getRandomGrid}>Random Grid</button>\n          <div className=\"grid\">\n            {grid.map((row, rowIdx) => {\n              return (\n                <div key={rowIdx}>\n                  {row.map((node, nodeIdx) => {\n                    const { row, col, isFinish, isStart, isWall } = node;\n                    return (\n                      <Node\n                        key={nodeIdx}\n                        col={col}\n                        isFinish={isFinish}\n                        isStart={isStart}\n                        isWall={isWall}\n                        mouseIsPressed={mouseIsPressed}\n                        onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                        onMouseEnter={(row, col) =>\n                          this.handleMouseEnter(row, col)\n                        }\n                        onMouseUp={() => this.handleMouseUp()}\n                        row={row}></Node>\n                    );\n                  })}\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\n\n","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}